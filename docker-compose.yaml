version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    command: /start
#    ports:
#      - "8000:8000"
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  frontend:
    build:
      context: ./frontend
    restart: always
    volumes:
      - react_build:/react/build
#  nginx:
#    image: nginx:latest
#    ports:
#      - "8080:8080"  # Заменить на 80:8080
#      - "8000:8000"
#      - "5555:5555"
#      - "15672:15672"
#    volumes:
#      - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
#      - react_build:/var/www/react
#      - certs:/etc/nginx/certs
#      - html:/usr/share/nginx/html
#      - vhost:/etc/nginx/vhost.d
#      - /var/run/docker.sock:/tmp/docker.sock:ro
#
#    depends_on:
#      - backend
#      - frontend
  nginx-proxy:
    container_name: nginx-proxy
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: always
    ports:
      - "80:8080"
      - "443:443"
      - "8000:8000"
      - "5555:5555"
      - "15672:15672"
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - react_build:/var/www/react
    depends_on:
      - backend
      - frontend
      - flower
  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - ./backend/.env/.env.prod.proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=hello_django_dev
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django

  redis:
    image: redis:5-alpine

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./backend/.env/.prod

  celery_worker:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_worker
    command: /start-celeryworker
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  celery_beat:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_beat
    command: /start-celerybeat
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  flower:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_flower
    command: /start-flower
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
volumes:
  react_build:
  postgres_data:
  staticfiles:
  mediafiles:
  certs:
  html:
  vhost:
  acme:
