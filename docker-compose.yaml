version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    command: /start
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: frontend
    tty: true
    environment:
      NODE_ENV: production
    volumes:
      - react_build:/app/build
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:1.21
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"  # Заменить на 80:80
      - "8000:8000"  # backend
      - "5555:5555"  # flower
      - "15672:15672"  # rabbitmq
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - react_build:/var/www/app
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - react_build:/var/www/app
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/app --email birthdayappremainder@gmail.com --agree-tos --no-eff-email --staging -d bdaybook.ru  -d www.bdaybook.ru

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=hello_django_dev
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django

  redis:
    image: redis:5-alpine

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./backend/.env/.prod

  celery_worker:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_worker
    command: /start-celeryworker
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  celery_beat:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_beat
    command: /start-celerybeat
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db

  flower:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_flower
    command: /start-flower
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
volumes:
  postgres_data:
  staticfiles:
  mediafiles:
  certbot-etc:
  certbot-var:
  react_build:

networks:
  app-network:
    driver: bridge

