version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    container_name: backend
    command: /start
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: frontend
    tty: true
    environment:
      NODE_ENV: production
    volumes:
      - react_build:/app/build
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:1.21
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"  # frontend
      - "8000:8000"  # backend
      - "5555:5555"  # flower
      - "15672:15672"  # rabbitmq
      - "433:433"  # https
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - react_build:/var/www/app
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    depends_on:
      - frontend
      - backend
      - flower
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - react_build:/var/www/app
    depends_on:
      - nginx
      - backend
    command: certonly --webroot --webroot-path=/var/www/app --email birthdayappremainder@gmail.com --agree-tos --no-eff-email --force-renewal -d bdaybook.ru  -d www.bdaybook.ru

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=hello_django_dev
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
    networks:
      - app-network

  redis:
    image: redis:5-alpine
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./backend/.env/.prod
    networks:
      - app-network

  celery_worker:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_worker
    command: /start-celeryworker
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
    networks:
      - app-network

  celery_beat:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_beat
    command: /start-celerybeat
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
    networks:
      - app-network

  flower:
    build:
      context: ./backend
      dockerfile: ./compose/production/django/Dockerfile
    image: django_celery_flower
    command: /start-flower
    volumes:
      - staticfiles:/app/staticfiles
      - mediafiles:/app/mediafiles
    env_file:
      - ./backend/.env/.prod
    depends_on:
      - redis
      - db
    networks:
      - app-network

volumes:
  postgres_data:
  staticfiles:
  mediafiles:
  certbot-etc:
  certbot-var:
  react_build:
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/user_1/dhparam/
      o: bind

networks:
  app-network:
    driver: bridge

